name: "StartOS SDK"
description: "Provides start-cli and dependencies with optimized caching"
runs:
  using: "composite"
  steps:
    - name: Setup Node.js environment
      uses: actions/setup-node@v4
      with:
        node-version: "22"

    - name: Cache Node.js dependencies
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Cache system packages
      uses: actions/cache@v4
      id: cache-apt
      with:
        path: /var/cache/apt
        key: ${{ runner.os }}-apt-${{ hashFiles('/etc/apt/sources.list.d/*') }}
        restore-keys: |
          ${{ runner.os }}-apt-

    - name: Install system dependencies
      if: steps.cache-apt.outputs.cache-hit != 'true'
      run: |
        sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          build-essential \
          clang \
          libclang-dev \
          squashfs-tools-ng \
          qemu-user-static
      shell: bash

    - name: Setup Rust with caching
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: linux/amd64,linux/arm64
        cache-image: true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        cache-binary: true

    - name: Cache start-cli binary
      uses: actions/cache@v4
      id: cache-start-cli
      with:
        path: /usr/local/bin/start-cli
        key: start-cli-${{ runner.arch }}-${{ runner.os }}

    - name: Install start-cli
      if: steps.cache-start-cli.outputs.cache-hit != 'true'
      run: |
        ARCH=$(uname -m)
        OS=$(uname -s | tr '[:upper:]' '[:lower:]')
        if [ "$ARCH" = "x86_64" ]; then
          ARCH_NAME="x86_64"
        elif [ "$ARCH" = "aarch64" ]; then
          ARCH_NAME="aarch64"
        fi
        if [ "$OS" = "linux" ]; then
          OS_NAME="unknown-linux-gnu"
        elif [ "$OS" = "darwin" ]; then
          OS_NAME="apple-darwin"
        fi
        BINARY_NAME="start-cli-${ARCH_NAME}-${OS_NAME}"
        ASSET_NAME="${BINARY_NAME}.tar.gz"
        LATEST_RELEASE_URL=$(curl -s https://api.github.com/repos/Start9Labs/start-cli/releases/latest | jq -r '.assets[] | select(.name=="'$ASSET_NAME'") | .browser_download_url')
        curl -L $LATEST_RELEASE_URL -o start-cli.tar.gz
        tar xzf start-cli.tar.gz
        sudo mv $BINARY_NAME /usr/local/bin/start-cli
        rm start-cli.tar.gz
      shell: bash
