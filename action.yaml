name: "StartOS SDK"
description: "Provides start-cli and dependencies with optimized caching"
runs:
  using: "composite"
  steps:
    - name: Setup Node.js environment
      uses: actions/setup-node@v4
      with:
        node-version: "22"

    - name: Cache APT packages only (safe)
      uses: actions/cache@v4
      id: cache-apt-packages
      with:
        path: |
          ~/apt-cache/*.deb
        key: ${{ runner.os }}-${{ runner.arch }}-apt-packages-${{ hashFiles('**/packages.list') }}
        restore-keys: |
          ${{ runner.os }}-${{ runner.arch }}-apt-packages-

    - name: Install system dependencies
      run: |
        # Create cache directory for downloaded packages
        mkdir -p ~/apt-cache

        # Clean up any problematic sources
        sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list

        # Update package lists
        sudo apt-get update

        # Download packages to our cache directory if not cached
        if [ "${{ steps.cache-apt-packages.outputs.cache-hit }}" != "true" ]; then
          cd ~/apt-cache
          sudo apt-get download squashfs-tools-ng build-essential qemu-user-static
        fi

        # Install from cache or directly
        if [ -f ~/apt-cache/*.deb ]; then
          sudo dpkg -i ~/apt-cache/*.deb || sudo apt-get install -f -y
        else
          sudo apt-get install -y --no-install-recommends \
            squashfs-tools-ng \
            build-essential \
            qemu-user-static
        fi

        # Clean up to avoid permission issues
        sudo apt-get clean
      shell: bash

    - name: Setup Rust with caching
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: Cache start-cli binary
      uses: actions/cache@v4
      id: cache-start-cli
      with:
        path: ~/.local/bin/start-cli
        key: start-cli-${{ runner.arch }}-${{ runner.os }}-${{ hashFiles('**/start-cli.version') }}
        restore-keys: |
          start-cli-${{ runner.arch }}-${{ runner.os }}

    - name: Install start-cli
      if: steps.cache-start-cli.outputs.cache-hit != 'true'
      run: |
        # Create local bin directory
        mkdir -p ~/.local/bin

        # Detect architecture and OS
        ARCH=$(uname -m)
        OS=$(uname -s | tr '[:upper:]' '[:lower:]')

        case "$ARCH" in
          x86_64) ARCH_NAME="x86_64" ;;
          aarch64|arm64) ARCH_NAME="aarch64" ;;
          *) echo "Unsupported architecture: $ARCH" && exit 1 ;;
        esac

        case "$OS" in
          linux) OS_NAME="unknown-linux-gnu" ;;
          darwin) OS_NAME="apple-darwin" ;;
          *) echo "Unsupported OS: $OS" && exit 1 ;;
        esac

        BINARY_NAME="start-cli-${ARCH_NAME}-${OS_NAME}"
        ASSET_NAME="${BINARY_NAME}.tar.gz"

        # Download and install
        echo "Downloading start-cli for ${ARCH_NAME}-${OS_NAME}..."
        LATEST_RELEASE_URL=$(curl -s https://api.github.com/repos/Start9Labs/start-cli/releases/latest | \
          jq -r --arg name "$ASSET_NAME" '.assets[] | select(.name==$name) | .browser_download_url')

        if [ -z "$LATEST_RELEASE_URL" ] || [ "$LATEST_RELEASE_URL" = "null" ]; then
          echo "Failed to find download URL for $ASSET_NAME"
          exit 1
        fi

        curl -fL "$LATEST_RELEASE_URL" -o start-cli.tar.gz
        tar xzf start-cli.tar.gz
        mv "$BINARY_NAME" ~/.local/bin/start-cli
        chmod +x ~/.local/bin/start-cli
        rm start-cli.tar.gz

        # Add to PATH for subsequent steps
        echo "$HOME/.local/bin" >> $GITHUB_PATH
      shell: bash
