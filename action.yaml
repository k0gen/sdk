name: "StartOS SDK"
description: "Provides start-cli and dependencies with optimized caching"
runs:
  using: "composite"
  steps:
    - name: Setup Node.js environment
      uses: actions/setup-node@v4
      with:
        node-version: "22"

    # FIXED: Check for correct package names and binaries
    - name: Check if system dependencies are installed
      id: check-deps
      run: |
        if command -v gensquashfs >/dev/null 2>&1 && \
           command -v gcc >/dev/null 2>&1 && \
           command -v qemu-aarch64-static >/dev/null 2>&1; then
          echo "deps-installed=true" >> $GITHUB_OUTPUT
          echo "‚úÖ System dependencies already installed"
        else
          echo "deps-installed=false" >> $GITHUB_OUTPUT
          echo "‚ùå System dependencies need installation"
        fi
      shell: bash

    - name: Cache APT packages
      if: steps.check-deps.outputs.deps-installed != 'true'
      uses: actions/cache@v4
      id: cache-apt-packages
      with:
        path: |
          ~/apt-cache/*.deb
        key: ${{ runner.os }}-${{ runner.arch }}-apt-packages-v4
        restore-keys: |
          ${{ runner.os }}-${{ runner.arch }}-apt-packages-

    # FIXED: Better APT package handling with proper dependency resolution
    - name: Install system dependencies
      if: steps.check-deps.outputs.deps-installed != 'true'
      run: |
        # Create cache directory for downloaded packages
        mkdir -p ~/apt-cache

        # Clean up any problematic sources
        sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list

        # Update package lists
        sudo apt-get update

        # Download packages with dependencies if not cached
        if [ "${{ steps.cache-apt-packages.outputs.cache-hit }}" != "true" ]; then
          cd ~/apt-cache
          # Download packages and their dependencies
          sudo apt-get download squashfs-tools-ng libsquashfs1 build-essential qemu-user-static
        fi

        # Install packages with proper dependency resolution
        if ls ~/apt-cache/*.deb 1> /dev/null 2>&1; then
          # Install all packages at once to resolve dependencies properly
          sudo dpkg -i ~/apt-cache/*.deb || true
          # Fix any broken dependencies
          sudo apt-get install -f -y
        else
          # Install directly with automatic dependency resolution
          sudo apt-get install -y --no-install-recommends \
            squashfs-tools-ng \
            build-essential \
            qemu-user-static
        fi

        # Verify installation
        echo "Verifying installations:"
        command -v gensquashfs && echo "‚úÖ squashfs-tools-ng installed" || echo "‚ùå squashfs-tools-ng missing"
        command -v gcc && echo "‚úÖ build-essential installed" || echo "‚ùå build-essential missing"
        command -v qemu-aarch64-static && echo "‚úÖ qemu-user-static installed" || echo "‚ùå qemu-user-static missing"

        # Clean up to avoid permission issues
        sudo apt-get clean
      shell: bash

    - name: Setup Rust with caching
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    # FIXED: Improved Docker setup with proper platform handling
    - name: Cache Docker buildx state
      uses: actions/cache@v4
      with:
        path: ~/.docker/buildx
        key: ${{ runner.os }}-${{ runner.arch }}-docker-buildx-v2

    - name: Set up Docker Buildx with QEMU (platform-aware)
      run: |
        # Detect current platform
        CURRENT_ARCH=$(uname -m)
        echo "Current architecture: $CURRENT_ARCH"
        
        # Set up buildx with appropriate driver
        docker buildx create --use --name mybuilder --driver docker-container --platform linux/amd64,linux/arm64 2>/dev/null || true
        docker buildx use mybuilder 2>/dev/null || docker buildx use default
        
        # Platform-specific QEMU setup
        if [ "$CURRENT_ARCH" = "x86_64" ]; then
          echo "Setting up QEMU for x86_64 host..."
          docker run --rm --privileged --platform linux/amd64 multiarch/qemu-user-static --reset -p yes || true
        elif [ "$CURRENT_ARCH" = "aarch64" ] || [ "$CURRENT_ARCH" = "arm64" ]; then
          echo "Setting up QEMU for ARM64 host..."
          docker run --rm --privileged --platform linux/arm64 multiarch/qemu-user-static --reset -p yes || true
        else
          echo "Unknown architecture, trying generic setup..."
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes || true
        fi
        
        echo "‚úÖ Docker multi-arch setup complete"
        docker buildx ls
        
        # Test multi-arch capability
        docker buildx inspect --bootstrap || echo "Buildx bootstrap completed with warnings"
      shell: bash

    # SIMPLE: Version-based caching for start-cli binary
    - name: Cache start-cli binary
      uses: actions/cache@v4
      id: cache-start-cli
      with:
        path: ~/.local/bin/start-cli
        key: start-cli-${{ runner.arch }}-${{ runner.os }}-v3
        restore-keys: |
          start-cli-${{ runner.arch }}-${{ runner.os }}-

    - name: Install start-cli
      if: steps.cache-start-cli.outputs.cache-hit != 'true'
      run: |
        # Create local bin directory
        mkdir -p ~/.local/bin

        # Detect architecture and OS
        ARCH=$(uname -m)
        OS=$(uname -s | tr '[:upper:]' '[:lower:]')

        case "$ARCH" in
          x86_64) ARCH_NAME="x86_64" ;;
          aarch64|arm64) ARCH_NAME="aarch64" ;;
          *) echo "Unsupported architecture: $ARCH" && exit 1 ;;
        esac

        case "$OS" in
          linux) OS_NAME="unknown-linux-musl" ;;
          darwin) OS_NAME="apple-darwin" ;;
          *) echo "Unsupported OS: $OS" && exit 1 ;;
        esac

        BINARY_NAME="start-cli-${ARCH_NAME}-${OS_NAME}"
        ASSET_NAME="${BINARY_NAME}.tar.gz"

        # Download and install
        echo "Downloading start-cli for ${ARCH_NAME}-${OS_NAME}..."
        LATEST_RELEASE_URL=$(curl -s https://api.github.com/repos/Start9Labs/start-cli/releases/latest | \
          jq -r --arg name "$ASSET_NAME" '.assets[] | select(.name==$name) | .browser_download_url')

        if [ -z "$LATEST_RELEASE_URL" ] || [ "$LATEST_RELEASE_URL" = "null" ]; then
          echo "Failed to find download URL for $ASSET_NAME"
          exit 1
        fi

        curl -fL "$LATEST_RELEASE_URL" -o start-cli.tar.gz
        tar xzf start-cli.tar.gz
        mv "$BINARY_NAME" ~/.local/bin/start-cli
        chmod +x ~/.local/bin/start-cli
        rm start-cli.tar.gz

        # Add to PATH for subsequent steps
        echo "$HOME/.local/bin" >> $GITHUB_PATH
      shell: bash

    - name: Verify optimized SDK setup
      run: |
        echo "üöÄ StartOS SDK Ready (Fixed & Optimized)!"
        echo "System deps check: ${{ steps.check-deps.outputs.deps-installed }}"
        echo "APT cache hit: ${{ steps.cache-apt-packages.outputs.cache-hit }}"
        echo "start-cli cache hit: ${{ steps.cache-start-cli.outputs.cache-hit }}"
        
        # Verify tools are available
        command -v start-cli >/dev/null && echo "‚úÖ start-cli ready" || echo "‚è≥ start-cli will be available after init"
        command -v docker >/dev/null && echo "‚úÖ docker ready" || echo "‚ùå docker missing"
        command -v gensquashfs >/dev/null 2>&1 && echo "‚úÖ squashfs-tools-ng ready" || echo "‚ùå squashfs-tools-ng missing"
        docker buildx version >/dev/null 2>&1 && echo "‚úÖ docker buildx ready" || echo "‚ùå docker buildx missing"
        
        echo "Architecture: $(uname -m)"
        echo "Platform: $(uname -s)"
      shell: bash
